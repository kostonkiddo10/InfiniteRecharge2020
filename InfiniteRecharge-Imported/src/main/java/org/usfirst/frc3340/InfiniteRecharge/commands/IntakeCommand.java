// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3340.InfiniteRecharge.commands;
import edu.wpi.first.wpilibj.command.Command;

import com.revrobotics.ControlType;

import org.usfirst.frc3340.InfiniteRecharge.Robot;
import org.usfirst.frc3340.InfiniteRecharge.commands.*;

/**
 *
 */
public class IntakeCommand extends Command {
    double kP, kI, kD, kIz, kFF, kMaxOutput, kMinOutput, x;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

    
    public IntakeCommand() {
        requires(Robot.intake);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        kP = 0.09; 
        kI = 1e-4;
        kD = 0.1; 
        kIz = 0; 
        kFF = 0; 
        kMaxOutput = 1; 
        kMinOutput = -1;

        Robot.intake.intakePID.setP(kP);
        Robot.intake.intakePID.setI(kI);
        Robot.intake.intakePID.setD(kD);
        Robot.intake.intakePID.setIZone(kIz);
        Robot.intake.intakePID.setFF(kFF);
        Robot.intake.intakePID.setOutputRange(kMinOutput, kMaxOutput);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        Robot.intake.intakePID.setReference(80, ControlType.kVelocity);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
